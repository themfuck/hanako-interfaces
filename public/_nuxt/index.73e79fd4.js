function m(t){return"connect"in t}function S(t){return!m(t)}function T(t){return t.flatMap(c=>S(c)?c.get():c)}var y={async set(t,c){return localStorage.setItem(t,c)},async get(t){return localStorage.getItem(t)},async del(t){localStorage.removeItem(t)}},h="Sui Wallet",O="wallet-kit:last-wallet";function W(t,c){return[...c.map(o=>t.find(s=>s.name===o)).filter(Boolean),...t.filter(o=>!c.includes(o.name))]}function I({adapters:t,preferredWallets:c=[h],storageAdapter:o=y,storageKey:s=O}){const f=new Set;let u=null,n={accounts:[],currentAccount:null,wallets:W(T(t),c),currentWallet:null,status:"DISCONNECTED"};const w=()=>({...n,isConnecting:n.status==="CONNECTING",isConnected:n.status==="CONNECTED",isError:n.status==="ERROR"});let i=w();function l(e){n={...n,...e},i=w(),f.forEach(r=>{try{r(i)}catch{}})}function N(){u&&(u(),u=null),l({status:"DISCONNECTED",accounts:[],currentAccount:null,currentWallet:null})}const d=t.filter(S);d.length&&d.map(e=>e.on("changed",()=>{l({wallets:W(T(t),c)})}));const g={async autoconnect(){if(!i.currentWallet)try{const e=await o.get(s);e&&g.connect(e)}catch{}},getState(){return i},subscribe(e){f.add(e);try{e(i)}catch{}return()=>{f.delete(e)}},async connect(e){var A,C;const r=(A=n.wallets.find(a=>a.name===e))!=null?A:null;if(l({currentWallet:r}),r&&!r.connecting){u&&u(),u=r.on("change",({connected:a,accounts:E})=>{a===!1?N():E&&l({accounts:E,currentAccount:n.currentAccount&&!E.includes(n.currentAccount)?E[0]:n.currentAccount})});try{l({status:"CONNECTING"}),await r.connect(),l({status:"CONNECTED"});try{await o.set(s,r.name)}catch{}const a=await r.getAccounts();l({accounts:a,currentAccount:(C=a[0])!=null?C:null})}catch(a){console.log("Wallet connection error",a),l({status:"ERROR"})}}else l({status:"DISCONNECTED"})},async disconnect(){if(!n.currentWallet){console.warn("Attempted to `disconnect` but no wallet was connected.");return}try{await o.del(s)}catch{}await n.currentWallet.disconnect(),N()},signTransaction(e){if(!n.currentWallet)throw new Error("No wallet is currently connected, cannot call `signAndExecuteTransaction`.");return n.currentWallet.signTransaction(e)},signAndExecuteTransaction(e,r){if(!n.currentWallet)throw new Error("No wallet is currently connected, cannot call `signAndExecuteTransaction`.");return n.currentWallet.signAndExecuteTransaction(e,r)}};return g}export{I as c};
